{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\Projects\\\\Keeper\\\\Client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nexport var CompoundComponentContext = /*#__PURE__*/React.createContext(null);\nCompoundComponentContext.displayName = 'CompoundComponentContext';\n/**\n * Provides a way for a component to know about its children.\n *\n * Child components register themselves with the `useCompoundItem` hook, passing in arbitrary metadata to the parent.\n *\n * This is a more powerful altervantive to `children` traversal, as child components don't have to be placed\n * directly inside the parent component. They can be anywhere in the tree (and even rendered by other components).\n *\n * The downside is that this doesn't work with SSR as it relies on the useEffect hook.\n *\n * @ignore - internal hook.\n */\nexport function useCompoundParent() {\n  var _React$useState = React.useState(new Map()),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    subitems = _React$useState2[0],\n    setSubitems = _React$useState2[1];\n  var subitemKeys = React.useRef(new Set());\n  var deregisterItem = React.useCallback(function deregisterItem(id) {\n    subitemKeys.current.delete(id);\n    setSubitems(function (previousState) {\n      var newState = new Map(previousState);\n      newState.delete(id);\n      return newState;\n    });\n  }, []);\n  var registerItem = React.useCallback(function registerItem(id, item, missingKeyGenerator) {\n    var providedOrGeneratedId;\n    if (id === undefined) {\n      if (missingKeyGenerator === undefined) {\n        throw new Error(\"The compound component's child doesn't have a key. You need to provide a missingKeyGenerator to generate it.\");\n      }\n      providedOrGeneratedId = missingKeyGenerator(subitemKeys.current);\n    } else {\n      providedOrGeneratedId = id;\n    }\n    subitemKeys.current.add(providedOrGeneratedId);\n    setSubitems(function (previousState) {\n      var newState = new Map(previousState);\n      newState.set(providedOrGeneratedId, item);\n      return newState;\n    });\n    return {\n      id: providedOrGeneratedId,\n      deregister: function deregister() {\n        return deregisterItem(providedOrGeneratedId);\n      }\n    };\n  }, [deregisterItem]);\n  var getItemIndex = React.useCallback(function getItemIndex(id) {\n    return Array.from(subitems.keys()).indexOf(id);\n  }, [subitems]);\n  return {\n    contextValue: {\n      getItemIndex: getItemIndex,\n      registerItem: registerItem,\n      totalSubitemCount: subitems.size\n    },\n    subitems: subitems\n  };\n}","map":null,"metadata":{},"sourceType":"module"}